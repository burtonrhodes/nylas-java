plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing' 
    id 'eclipse'  // necessary for workaround at bottom
}

repositories {
    mavenCentral()
}

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

sourceSets {
    examples {
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
}

configurations {
    examplesImplementation.extendsFrom implementation
    examplesRuntimeOnly.extendsFrom runtimeOnly
}

dependencies {
    //////////////////////////////////
    // Public dependencies
    
    // OkHttp 3 - Http client (without Kotlin dependency of version 4)
    api("com.squareup.okhttp3:okhttp:3.14.5")
    
    // Moshi JSON library
    implementation("com.squareup.moshi:moshi:1.15.0")
    implementation("com.squareup.moshi:moshi-adapters:1.15.0")
    
    // SLF4J for logging facade
    implementation("org.slf4j:slf4j-api:2.0.7")

    // Websocket dependency
    api('org.java-websocket:Java-WebSocket:1.5.3')

    ///////////////////////////////////
    // Test dependencies
    
    // jUnit 5 for Testing
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.0'
    
    // use log4j logging for tests
    testRuntimeOnly('org.apache.logging.log4j:log4j-slf4j-impl:2.17.0')
    
    // use wiremock for mocking the nylas server during tests
    testImplementation('com.github.tomakehurst:wiremock-jre8:2.35.1')

    // mockito for dependency mocking
    dependencies {
        testImplementation "org.mockito:mockito-core:3.+"
        testImplementation 'org.mockito:mockito-inline:2.13.0'
    }

    
    ///////////////////////////////////
    // Examples dependencies
    
    // use log4j2 logging for examples
    examplesImplementation('org.apache.logging.log4j:log4j-api:2.17.0')
    examplesImplementation('org.apache.logging.log4j:log4j-core:2.17.0')
    examplesImplementation('org.apache.logging.log4j:log4j-slf4j-impl:2.17.0')
    
    // Guava for examples since it makes all Java better and we don't need to worry about
    // conflicting dependencies downstream for examples
    examplesImplementation('com.google.guava:guava:28.2-jre')
    
    // jetty http server for examples that use callbacks 
    examplesImplementation('org.eclipse.jetty:jetty-server:9.4.28.v20200408')
    examplesImplementation('org.eclipse.jetty:jetty-servlet:9.4.28.v20200408')
    
    // freemarker template library for serving basic html in some examples
    examplesImplementation('org.freemarker:freemarker:2.3.29')
    
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed", "standardError"
    }
    afterSuite { desc, result ->
        if (!desc.parent) { // will match the outermost suite
            def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} passed, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)"
            def startItem = '|  ', endItem = '  |'
            def repeatLength = startItem.length() + output.length() + endItem.length()
            println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
        }
    }
}

tasks.register('runExample', JavaExec) {
    classpath = sourceSets.examples.runtimeClasspath
    mainClass.set(project.hasProperty("example") ? project.getProperty("example") : "com.nylas2.examples.Examples")
}

def getGitCommitHash = { ->
    def buffer = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', 'HEAD'
        standardOutput = buffer
    }
    return buffer.toString().trim()
}

tasks.register('createProperties') {
    dependsOn processResources
    doLast {
        def resourcesDir = layout.buildDirectory.dir('resources/main').get().asFile
        mkdir resourcesDir
        def propertiesFile = new File(resourcesDir, 'build.properties')
        propertiesFile.withWriter { w ->
            Properties p = new Properties()
            p['version'] = project.version.toString()
            p['commit.hash'] = getGitCommitHash()
            p['build.timestamp'] = Instant.now().toString()
            p.store w, null
        }
    }
}

classes {
    dependsOn createProperties
}

tasks.register('sourceJar', Jar) {
    archiveClassifier.set('sources')
    from sourceSets.main.allSource
}
tasks.register('javadocJar', Jar) {
    dependsOn javadoc
    archiveClassifier.set('javadoc')
    from javadoc.destinationDir
}

javadoc.options.addStringOption('Xdoclint:none', '-quiet')

artifacts {
    archives jar
    archives sourceJar
    archives javadocJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact sourceJar
            artifact javadocJar
            pom {
                name = "Nylas Java SDK"
                description = "Java SDK for the Nylas Communication Platform"
                url = "https://github.com/nylas/nylas-java"
                licenses {
                    license {
                        name = "MIT"
                        url = "http://www.opensource.org/licenses/mit-license.php"
                    }
                }
                developers {
                    developer {
                        id = "ddlatham"
                        name = "David Latham"
                        organization = "Nylas"
                        organizationUrl = "https://www.nylas.com/"
                    }
                    developer {
                        id = "mrashed-dev"
                        name = "Mostafa Rashed"
                        organization = "Nylas"
                        organizationUrl = "https://www.nylas.com/"
                    }
                }
                scm {
                    url = "https://github.com/nylas/nylas-java"
                    connection = "scm:git:https://github.com/nylas/nylas-java.git"
                    developerConnection = "scm:git:https://github.com/nylas/nylas-java.git"
                }
            }
        }
    }
    repositories {
        maven {
            def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username = "$ossrhUser"
                password = "$ossrhPassword"
            }
        }
    }
}

signing {
//    sign publishing.publications.mavenJava
}

// workaround for https://github.com/eclipse/buildship/issues/476
eclipse {
    classpath {
        plusConfigurations.add configurations.examplesCompileClasspath
    }
}
